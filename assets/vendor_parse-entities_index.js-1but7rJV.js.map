{"version":3,"file":"vendor_parse-entities_index.js-1but7rJV.js","sources":["../../frontend/node_modules/parse-entities/index.js"],"sourcesContent":["'use strict'\n\nvar legacy = require('character-entities-legacy')\nvar invalid = require('character-reference-invalid')\nvar decimal = require('is-decimal')\nvar hexadecimal = require('is-hexadecimal')\nvar alphanumerical = require('is-alphanumerical')\nvar decodeEntity = require('./decode-entity')\n\nmodule.exports = parseEntities\n\nvar own = {}.hasOwnProperty\nvar fromCharCode = String.fromCharCode\nvar noop = Function.prototype\n\n// Default settings.\nvar defaults = {\n  warning: null,\n  reference: null,\n  text: null,\n  warningContext: null,\n  referenceContext: null,\n  textContext: null,\n  position: {},\n  additional: null,\n  attribute: false,\n  nonTerminated: true\n}\n\n// Characters.\nvar tab = 9 // '\\t'\nvar lineFeed = 10 // '\\n'\nvar formFeed = 12 // '\\f'\nvar space = 32 // ' '\nvar ampersand = 38 // '&'\nvar semicolon = 59 // ';'\nvar lessThan = 60 // '<'\nvar equalsTo = 61 // '='\nvar numberSign = 35 // '#'\nvar uppercaseX = 88 // 'X'\nvar lowercaseX = 120 // 'x'\nvar replacementCharacter = 65533 // '�'\n\n// Reference types.\nvar name = 'named'\nvar hexa = 'hexadecimal'\nvar deci = 'decimal'\n\n// Map of bases.\nvar bases = {}\n\nbases[hexa] = 16\nbases[deci] = 10\n\n// Map of types to tests.\n// Each type of character reference accepts different characters.\n// This test is used to detect whether a reference has ended (as the semicolon\n// is not strictly needed).\nvar tests = {}\n\ntests[name] = alphanumerical\ntests[deci] = decimal\ntests[hexa] = hexadecimal\n\n// Warning types.\nvar namedNotTerminated = 1\nvar numericNotTerminated = 2\nvar namedEmpty = 3\nvar numericEmpty = 4\nvar namedUnknown = 5\nvar numericDisallowed = 6\nvar numericProhibited = 7\n\n// Warning messages.\nvar messages = {}\n\nmessages[namedNotTerminated] =\n  'Named character references must be terminated by a semicolon'\nmessages[numericNotTerminated] =\n  'Numeric character references must be terminated by a semicolon'\nmessages[namedEmpty] = 'Named character references cannot be empty'\nmessages[numericEmpty] = 'Numeric character references cannot be empty'\nmessages[namedUnknown] = 'Named character references must be known'\nmessages[numericDisallowed] =\n  'Numeric character references cannot be disallowed'\nmessages[numericProhibited] =\n  'Numeric character references cannot be outside the permissible Unicode range'\n\n// Wrap to ensure clean parameters are given to `parse`.\nfunction parseEntities(value, options) {\n  var settings = {}\n  var option\n  var key\n\n  if (!options) {\n    options = {}\n  }\n\n  for (key in defaults) {\n    option = options[key]\n    settings[key] =\n      option === null || option === undefined ? defaults[key] : option\n  }\n\n  if (settings.position.indent || settings.position.start) {\n    settings.indent = settings.position.indent || []\n    settings.position = settings.position.start\n  }\n\n  return parse(value, settings)\n}\n\n// Parse entities.\n// eslint-disable-next-line complexity\nfunction parse(value, settings) {\n  var additional = settings.additional\n  var nonTerminated = settings.nonTerminated\n  var handleText = settings.text\n  var handleReference = settings.reference\n  var handleWarning = settings.warning\n  var textContext = settings.textContext\n  var referenceContext = settings.referenceContext\n  var warningContext = settings.warningContext\n  var pos = settings.position\n  var indent = settings.indent || []\n  var length = value.length\n  var index = 0\n  var lines = -1\n  var column = pos.column || 1\n  var line = pos.line || 1\n  var queue = ''\n  var result = []\n  var entityCharacters\n  var namedEntity\n  var terminated\n  var characters\n  var character\n  var reference\n  var following\n  var warning\n  var reason\n  var output\n  var entity\n  var begin\n  var start\n  var type\n  var test\n  var prev\n  var next\n  var diff\n  var end\n\n  if (typeof additional === 'string') {\n    additional = additional.charCodeAt(0)\n  }\n\n  // Cache the current point.\n  prev = now()\n\n  // Wrap `handleWarning`.\n  warning = handleWarning ? parseError : noop\n\n  // Ensure the algorithm walks over the first character and the end\n  // (inclusive).\n  index--\n  length++\n\n  while (++index < length) {\n    // If the previous character was a newline.\n    if (character === lineFeed) {\n      column = indent[lines] || 1\n    }\n\n    character = value.charCodeAt(index)\n\n    if (character === ampersand) {\n      following = value.charCodeAt(index + 1)\n\n      // The behaviour depends on the identity of the next character.\n      if (\n        following === tab ||\n        following === lineFeed ||\n        following === formFeed ||\n        following === space ||\n        following === ampersand ||\n        following === lessThan ||\n        following !== following ||\n        (additional && following === additional)\n      ) {\n        // Not a character reference.\n        // No characters are consumed, and nothing is returned.\n        // This is not an error, either.\n        queue += fromCharCode(character)\n        column++\n\n        continue\n      }\n\n      start = index + 1\n      begin = start\n      end = start\n\n      if (following === numberSign) {\n        // Numerical entity.\n        end = ++begin\n\n        // The behaviour further depends on the next character.\n        following = value.charCodeAt(end)\n\n        if (following === uppercaseX || following === lowercaseX) {\n          // ASCII hex digits.\n          type = hexa\n          end = ++begin\n        } else {\n          // ASCII digits.\n          type = deci\n        }\n      } else {\n        // Named entity.\n        type = name\n      }\n\n      entityCharacters = ''\n      entity = ''\n      characters = ''\n      test = tests[type]\n      end--\n\n      while (++end < length) {\n        following = value.charCodeAt(end)\n\n        if (!test(following)) {\n          break\n        }\n\n        characters += fromCharCode(following)\n\n        // Check if we can match a legacy named reference.\n        // If so, we cache that as the last viable named reference.\n        // This ensures we do not need to walk backwards later.\n        if (type === name && own.call(legacy, characters)) {\n          entityCharacters = characters\n          entity = legacy[characters]\n        }\n      }\n\n      terminated = value.charCodeAt(end) === semicolon\n\n      if (terminated) {\n        end++\n\n        namedEntity = type === name ? decodeEntity(characters) : false\n\n        if (namedEntity) {\n          entityCharacters = characters\n          entity = namedEntity\n        }\n      }\n\n      diff = 1 + end - start\n\n      if (!terminated && !nonTerminated) {\n        // Empty.\n      } else if (!characters) {\n        // An empty (possible) entity is valid, unless it’s numeric (thus an\n        // ampersand followed by an octothorp).\n        if (type !== name) {\n          warning(numericEmpty, diff)\n        }\n      } else if (type === name) {\n        // An ampersand followed by anything unknown, and not terminated, is\n        // invalid.\n        if (terminated && !entity) {\n          warning(namedUnknown, 1)\n        } else {\n          // If theres something after an entity name which is not known, cap\n          // the reference.\n          if (entityCharacters !== characters) {\n            end = begin + entityCharacters.length\n            diff = 1 + end - begin\n            terminated = false\n          }\n\n          // If the reference is not terminated, warn.\n          if (!terminated) {\n            reason = entityCharacters ? namedNotTerminated : namedEmpty\n\n            if (settings.attribute) {\n              following = value.charCodeAt(end)\n\n              if (following === equalsTo) {\n                warning(reason, diff)\n                entity = null\n              } else if (alphanumerical(following)) {\n                entity = null\n              } else {\n                warning(reason, diff)\n              }\n            } else {\n              warning(reason, diff)\n            }\n          }\n        }\n\n        reference = entity\n      } else {\n        if (!terminated) {\n          // All non-terminated numeric entities are not rendered, and trigger a\n          // warning.\n          warning(numericNotTerminated, diff)\n        }\n\n        // When terminated and number, parse as either hexadecimal or decimal.\n        reference = parseInt(characters, bases[type])\n\n        // Trigger a warning when the parsed number is prohibited, and replace\n        // with replacement character.\n        if (prohibited(reference)) {\n          warning(numericProhibited, diff)\n          reference = fromCharCode(replacementCharacter)\n        } else if (reference in invalid) {\n          // Trigger a warning when the parsed number is disallowed, and replace\n          // by an alternative.\n          warning(numericDisallowed, diff)\n          reference = invalid[reference]\n        } else {\n          // Parse the number.\n          output = ''\n\n          // Trigger a warning when the parsed number should not be used.\n          if (disallowed(reference)) {\n            warning(numericDisallowed, diff)\n          }\n\n          // Stringify the number.\n          if (reference > 0xffff) {\n            reference -= 0x10000\n            output += fromCharCode((reference >>> (10 & 0x3ff)) | 0xd800)\n            reference = 0xdc00 | (reference & 0x3ff)\n          }\n\n          reference = output + fromCharCode(reference)\n        }\n      }\n\n      // Found it!\n      // First eat the queued characters as normal text, then eat an entity.\n      if (reference) {\n        flush()\n\n        prev = now()\n        index = end - 1\n        column += end - start + 1\n        result.push(reference)\n        next = now()\n        next.offset++\n\n        if (handleReference) {\n          handleReference.call(\n            referenceContext,\n            reference,\n            {start: prev, end: next},\n            value.slice(start - 1, end)\n          )\n        }\n\n        prev = next\n      } else {\n        // If we could not find a reference, queue the checked characters (as\n        // normal characters), and move the pointer to their end.\n        // This is possible because we can be certain neither newlines nor\n        // ampersands are included.\n        characters = value.slice(start - 1, end)\n        queue += characters\n        column += characters.length\n        index = end - 1\n      }\n    } else {\n      // Handle anything other than an ampersand, including newlines and EOF.\n      if (\n        character === 10 // Line feed\n      ) {\n        line++\n        lines++\n        column = 0\n      }\n\n      if (character === character) {\n        queue += fromCharCode(character)\n        column++\n      } else {\n        flush()\n      }\n    }\n  }\n\n  // Return the reduced nodes.\n  return result.join('')\n\n  // Get current position.\n  function now() {\n    return {\n      line: line,\n      column: column,\n      offset: index + (pos.offset || 0)\n    }\n  }\n\n  // “Throw” a parse-error: a warning.\n  function parseError(code, offset) {\n    var position = now()\n\n    position.column += offset\n    position.offset += offset\n\n    handleWarning.call(warningContext, messages[code], position, code)\n  }\n\n  // Flush `queue` (normal text).\n  // Macro invoked before each entity and at the end of `value`.\n  // Does nothing when `queue` is empty.\n  function flush() {\n    if (queue) {\n      result.push(queue)\n\n      if (handleText) {\n        handleText.call(textContext, queue, {start: prev, end: now()})\n      }\n\n      queue = ''\n    }\n  }\n}\n\n// Check if `character` is outside the permissible unicode range.\nfunction prohibited(code) {\n  return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff\n}\n\n// Check if `character` is disallowed.\nfunction disallowed(code) {\n  return (\n    (code >= 0x0001 && code <= 0x0008) ||\n    code === 0x000b ||\n    (code >= 0x000d && code <= 0x001f) ||\n    (code >= 0x007f && code <= 0x009f) ||\n    (code >= 0xfdd0 && code <= 0xfdef) ||\n    (code & 0xffff) === 0xffff ||\n    (code & 0xffff) === 0xfffe\n  )\n}\n"],"names":["legacy","require$$0","invalid","require$$1","decimal","require$$2","hexadecimal","require$$3","alphanumerical","require$$4","decodeEntity","require$$5","parseEntities_1","parseEntities","own","fromCharCode","noop","defaults","tab","lineFeed","formFeed","space","ampersand","semicolon","lessThan","equalsTo","numberSign","uppercaseX","lowercaseX","replacementCharacter","name","hexa","deci","bases","tests","namedNotTerminated","numericNotTerminated","namedEmpty","numericEmpty","namedUnknown","numericDisallowed","numericProhibited","messages","value","options","settings","option","key","parse","additional","nonTerminated","handleText","handleReference","handleWarning","textContext","referenceContext","warningContext","pos","indent","length","index","lines","column","line","queue","result","entityCharacters","namedEntity","terminated","characters","character","reference","following","warning","reason","output","entity","begin","start","type","test","prev","next","diff","end","now","parseError","prohibited","disallowed","flush","code","offset","position"],"mappings":"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","x_google_ignoreList":[0]}