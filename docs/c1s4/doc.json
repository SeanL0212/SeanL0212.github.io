{"type":"document","children":[{"type":"heading","children":[{"type":"text","content":"Maintainability "},{"type":"emphasis","children":[{"type":"text","content":"p18"}]}],"attributes":{"id":"maintainability-p18","level":1}},{"type":"blockQuote","children":[{"type":"paragraph","children":[{"type":"text","content":"It is well known that the majority of the cost of software is not in its initial development, but in its ongoing maintenanceâ€”fixing bugs, keeping its systems operational, investigating failures, adapting it to new platforms, modifying it for new use cases, repaying technical debt, and adding new features."}]}]},{"type":"paragraph","children":[{"type":"text"},{"type":"emphasis","children":[{"type":"text","content":"Legacy systems"}]},{"type":"text","content":" are inevitable during maintenance, as there are numerous reasons why systems persist over time. Therefore, it is difficult to provide general recommendations for dealing with them."}]},{"type":"paragraph","children":[{"type":"text","content":"However, we can and should design software in ways that minimize pain during maintenance and avoid creating legacy software. To this end, there are three key design principles:"}]},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Operability"}]},{"type":"text","content":": Make it easy for operations teams to keep the system running smoothly."}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Simplicity"}]},{"type":"text","content":": Make it easy for new engineers to understand the system by removing as much complexity as possible."}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Evolvability"}]},{"type":"text","content":": Make it easy for engineers to make changes to the system in the future, adapting it for unanticipated use cases as requirements change. Also known as extensibility, modifiability, or plasticity."}]}]}],"attributes":{"ordered":true,"tight":true}},{"type":"heading","children":[{"type":"text","content":"Operability: Making Life Easy for Operations "},{"type":"emphasis","children":[{"type":"text","content":"p19"}]}],"attributes":{"id":"operability-making-life-easy-for-operations-p19","level":2}},{"type":"heading","children":[{"type":"text","content":"Operations Team Responsibilities "},{"type":"emphasis","children":[{"type":"text","content":"p19"}]}],"attributes":{"id":"operations-team-responsibilities-p19","level":3}},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Monitoring"}]},{"type":"text","content":" the health of the system and quickly "},{"type":"strong","children":[{"type":"text","content":"restoring"}]},{"type":"text","content":" service if it enters a degraded state"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Tracking"}]},{"type":"text","content":" down the causes of problems, such as system failures or performance degradation"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Keeping software and platforms "},{"type":"strong","children":[{"type":"text","content":"up to date"}]},{"type":"text","content":", including security patches"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Understanding how different systems "},{"type":"strong","children":[{"type":"text","content":"affect"}]},{"type":"text","content":" each other, so that "},{"type":"strong","children":[{"type":"text","content":"problematic changes"}]},{"type":"text","content":" can be prevented before causing damage"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Anticipating future problems and addressing them proactively (e.g., capacity planning)"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Establishing good practices and tools for deployment, configuration management, and more"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Performing "},{"type":"strong","children":[{"type":"text","content":"complex maintenance"}]},{"type":"text","content":" tasks, such as migrating applications between platforms"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Maintaining the "},{"type":"strong","children":[{"type":"text","content":"security"}]},{"type":"text","content":" of the system as "},{"type":"strong","children":[{"type":"text","content":"configuration changes"}]},{"type":"text","content":" are implemented"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Defining processes that make operations "},{"type":"strong","children":[{"type":"text","content":"predictable"}]},{"type":"text","content":" and help keep the production environment "},{"type":"strong","children":[{"type":"text","content":"stable"}]},{"type":"text"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Preserving organizational knowledge"}]},{"type":"text","content":" about the system, even as team members come and go"}]}]}],"attributes":{"ordered":false,"tight":true}},{"type":"heading","children":[{"type":"text","content":"Making Routine Tasks Easy "},{"type":"emphasis","children":[{"type":"text","content":"p20"}]}],"attributes":{"id":"making-routine-tasks-easy-p20","level":3}},{"type":"paragraph","children":[{"type":"text","content":"Good operability means making routine tasks easy, allowing the operations team to focus their efforts on high-value activities. Data systems can achieve this in several ways:"}]},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Providing "},{"type":"strong","children":[{"type":"text","content":"visibility"}]},{"type":"text","content":" into the runtime behavior and internals of the system through effective "},{"type":"strong","children":[{"type":"text","content":"monitoring"}]},{"type":"text"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Supporting "},{"type":"strong","children":[{"type":"text","content":"automation"}]},{"type":"text","content":" and seamless "},{"type":"strong","children":[{"type":"text","content":"integration"}]},{"type":"text","content":" with standard tools"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Avoiding dependency on individual machines"}]},{"type":"text","content":", allowing systems to continue running uninterrupted during maintenance"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Offering clear "},{"type":"strong","children":[{"type":"text","content":"documentation"}]},{"type":"text","content":" and an intuitive "},{"type":"strong","children":[{"type":"text","content":"operational model"}]},{"type":"text","content":" (\"If I do X, Y will happen\")"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Implementing sensible "},{"type":"strong","children":[{"type":"text","content":"default"}]},{"type":"text","content":" behaviors while giving administrators the freedom to "},{"type":"strong","children":[{"type":"text","content":"override"}]},{"type":"text","content":" defaults when needed"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Incorporating "},{"type":"strong","children":[{"type":"text","content":"self-healing"}]},{"type":"text","content":" mechanisms where appropriate, while still providing administrators with "},{"type":"strong","children":[{"type":"text","content":"manual control"}]},{"type":"text","content":" over system state when necessary"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Exhibiting "},{"type":"strong","children":[{"type":"text","content":"predictable"}]},{"type":"text","content":" behavior that minimizes surprises"}]}]}],"attributes":{"ordered":false,"tight":true}},{"type":"heading","children":[{"type":"text","content":"Simplicity: Managing Complexity "},{"type":"emphasis","children":[{"type":"text","content":"p20"}]}],"attributes":{"id":"simplicity-managing-complexity-p20","level":2}},{"type":"heading","children":[{"type":"text","content":"Complexity Symptoms "},{"type":"emphasis","children":[{"type":"text","content":"p21"}]}],"attributes":{"id":"complexity-symptoms-p21","level":3}},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Explosion of the "},{"type":"strong","children":[{"type":"text","content":"state space"}]},{"type":"text"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Tight coupling"}]},{"type":"text","content":" between modules"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Tangled dependencies"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Inconsistent naming and terminology"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Performance "},{"type":"strong","children":[{"type":"text","content":"hacks"}]},{"type":"text","content":" and optimizations"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Special-case handling and exceptions"}]}]}],"attributes":{"ordered":false,"tight":true}},{"type":"heading","children":[{"type":"text","content":"Accidental Complexity "},{"type":"emphasis","children":[{"type":"text","content":"p21"}]}],"attributes":{"id":"accidental-complexity-p21","level":3}},{"type":"blockQuote","children":[{"type":"paragraph","children":[{"type":"text","content":"Making a system simpler does not necessarily mean reducing its functionality; it can also mean removing accidental complexity."}]}]},{"type":"paragraph","children":[{"type":"text","content":"Definition: Complexity that is not "},{"type":"strong","children":[{"type":"text","content":"inherent"}]},{"type":"text","content":" in the problem being solved (as seen by users) but arises solely from the "},{"type":"strong","children":[{"type":"text","content":"implementation"}]}]},{"type":"paragraph","children":[{"type":"text","content":"Solution: Effective "},{"type":"strong","children":[{"type":"text","content":"abstraction"}]}]},{"type":"paragraph","children":[{"type":"text","content":"This book focuses on good abstractions that extract parts of large systems into well-defined, reusable components."}]},{"type":"heading","children":[{"type":"text","content":"Evolvability: Making Change Easy "},{"type":"emphasis","children":[{"type":"text","content":"p21"}]}],"attributes":{"id":"evolvability-making-change-easy-p21","level":2}},{"type":"paragraph","children":[{"type":"text","content":"Evolvability is the ability to adapt to change. In terms of organizational processes, "},{"type":"strong","children":[{"type":"text","content":"Agile"}]},{"type":"text","content":" methodologies provide a framework for adapting to changing requirements and environments."}]}],"attributes":{"date":"2025-09-11","tags":["book","designing data intensive applications"],"title":"Maintainability"}}