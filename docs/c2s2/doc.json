{"type":"document","children":[{"type":"heading","children":[{"type":"text","content":"Query Languages for Data "},{"type":"emphasis","children":[{"type":"text","content":"p42"}]}],"attributes":{"id":"query-languages-for-data-p42","level":1}},{"type":"heading","children":[{"type":"text","content":"Declarative versus Imperative Languages "},{"type":"emphasis","children":[{"type":"text","content":"p42"}]}],"attributes":{"id":"declarative-versus-imperative-languages-p42","level":2}},{"type":"paragraph","children":[{"type":"text","content":"In databases, queries are typically written in "},{"type":"strong","children":[{"type":"text","content":"declarative"}]},{"type":"text","content":" languages, as opposed to the "},{"type":"strong","children":[{"type":"text","content":"imperative"}]},{"type":"text","content":" languages used in most programming contexts. Declarative languages specify "},{"type":"strong","children":[{"type":"text","content":"what"}]},{"type":"text","content":" results we want, while imperative languages describe "},{"type":"strong","children":[{"type":"text","content":"how"}]},{"type":"text","content":" to compute those results."}]},{"type":"paragraph","children":[{"type":"text","content":"When using imperative languages, programmers must consider performance implications, and different implementations can yield varying performance despite producing identical results. In contrast, declarative languages only require specifying the desired results, allowing the query engine to handle optimization internally."}]},{"type":"paragraph","children":[{"type":"text","content":"Another significant advantage of declarative languages is that they're much easier to parallelize and execute across distributed systems."}]},{"type":"heading","children":[{"type":"text","content":"MapReduce Querying "},{"type":"emphasis","children":[{"type":"text","content":"p46"}]}],"attributes":{"id":"mapreduce-querying-p46","level":1}},{"type":"paragraph","children":[{"type":"text","content":"The MapReduce model will be discussed in more detail in later chapters. For now, here's a simple example to illustrate the concept."}]},{"type":"heading","children":[{"type":"text","content":"Example "},{"type":"emphasis","children":[{"type":"text","content":"p46"}]}],"attributes":{"id":"example-p46","level":2}},{"type":"blockQuote","children":[{"type":"paragraph","children":[{"type":"text","content":"Imagine you are a marine biologist who adds an observation record to your database each time you see animals in the ocean. Now you want to generate a report showing how many sharks you have sighted per month."}]}]},{"type":"paragraph","children":[{"type":"text","content":"The PostgreSQL statement for it will be like"}]},{"type":"codeBlock","content":"SELECT date_trunc('month', observation_timestamp) AS observation_month, \n       sum(num_animals) AS total_animals\nFROM observations\nWHERE family = 'Sharks'\nGROUP BY observation_month;\n","attributes":{"language":"sql"}},{"type":"paragraph","children":[{"type":"text","content":"With the help of MapReduce feature in MongoDB, it can be written as"}]},{"type":"codeBlock","content":"db.observation.mapReduce(\n    function map() {\n        var year = this.observationTimestamp.getFullYear();\n        var month = this.observationTimestamp.getMonth() + 1;\n        emit(year + \"-\" + month, this.numAnimals);\n    },\n    function reduce(key values) {\n        return Array.sum(values);\n    },\n    {\n        query: {\n            family: \"Sharks\"\n        },\n        out: \"monthlySharkReport\"\n    }\n)\n","attributes":{"language":"js"}},{"type":"heading","children":[{"type":"text","content":"explanation "},{"type":"emphasis","children":[{"type":"text","content":"p47"}]}],"attributes":{"id":"explanation-p47","level":3}},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"in "},{"type":"inlineCode","content":"map"},{"type":"text","content":" function it uses "},{"type":"inlineCode","content":"emit"},{"type":"text","content":" to transmit a "},{"type":"inlineCode","content":"key-value"},{"type":"text"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"in "},{"type":"inlineCode","content":"reduce"},{"type":"text","content":" function it reveives the "},{"type":"inlineCode","content":"key-value"},{"type":"text","content":" from "},{"type":"inlineCode","content":"map"},{"type":"text","content":" function"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"inlineCode","content":"query"},{"type":"text","content":" works as a filter"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"the final output is written to the collection "},{"type":"inlineCode","content":"monthlySharkReport"},{"type":"text"}]}]}],"attributes":{"ordered":false,"tight":true}},{"type":"heading","children":[{"type":"text","content":"notice "},{"type":"emphasis","children":[{"type":"text","content":"p48"}]}],"attributes":{"id":"notice-p48","level":3}},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"inlineCode","content":"map"},{"type":"text","content":" and "},{"type":"inlineCode","content":"reduce"},{"type":"text","content":" must be "},{"type":"emphasis","children":[{"type":"text","content":"pure functions"}]},{"type":"text","content":", which means they can not have any side effects"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"MapReduce just a fairly low-level programming model for distributed execution. High-level querying languages like SQL can be implemented using it, but it is not a must. There are many other ways to execute SQL on a distributed system"}]}]}],"attributes":{"ordered":false,"tight":true}},{"type":"heading","children":[{"type":"text","content":"drawback and improvement "},{"type":"emphasis","children":[{"type":"text","content":"p48"}]}],"attributes":{"id":"drawback-and-improvement-p48","level":3}},{"type":"paragraph","children":[{"type":"text","content":"We can notice that the MapReduce procedure above is "},{"type":"strong","children":[{"type":"text","content":"imperative"}]},{"type":"text","content":"(todo: cite here), not "},{"type":"strong","children":[{"type":"text","content":"declarative"}]},{"type":"text","content":", which has some drawback in performance. To fix it, MongoDB has a support called "},{"type":"emphasis","children":[{"type":"text","content":"aggregation pipeline"}]},{"type":"text","content":" like below"}]},{"type":"codeBlock","content":"db.observations.aggregate([\n    { $match: { family: \"Sharks\" } },\n    { $group: {\n        _id: {\n            year:  { $year:  \"$observationTimestamp\" },\n            month: { $month: \"$observationTimestamp\" }\n        },\n        totalAnimals: { $sum: \"$numAnimals\" }\n    } }\n]);\n","attributes":{"language":"json"}},{"type":"paragraph","children":[{"type":"text","content":"It does not reveal any pattern of a MapReduce model, but it is executed in that way"}]}],"attributes":{"date":"2025-09-13","tags":["book","designing data intensive applications"],"title":"Query Languages for Data"}}