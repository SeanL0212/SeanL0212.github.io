{"type":"document","children":[{"type":"heading","children":[{"type":"text","content":"Datalog "},{"type":"emphasis","children":[{"type":"text","content":"p60"}]}],"attributes":{"id":"datalog-p60","level":1}},{"type":"paragraph","children":[{"type":"text"},{"type":"emphasis","children":[{"type":"text","content":"Datalog"}]},{"type":"text","content":" is a much older language than SPARQL or Cypher. It is less well known nevertheless important, because it provides the foundation that later query languages build upon.\nIn practice, Datalog is used in a few data systems: Datomic and Cascalog. Latter one is the implementation for querying large datasets in Hadoop."}]},{"type":"heading","children":[{"type":"text","content":"Form "},{"type":"emphasis","children":[{"type":"text","content":"p61"}]}],"attributes":{"id":"form-p61","level":1}},{"type":"paragraph","children":[{"type":"text","content":"Datalog's data model is similar to the triple-store model. Instead of "},{"type":"emphasis","children":[{"type":"text","content":"(subject, predicate, object)"}]},{"type":"text","content":", it uses "},{"type":"emphasis","children":[{"type":"text","content":"predicate(subject, object)"}]}]},{"type":"codeBlock","content":"name(namerica, 'North America').\ntype(namerica, continent).\nname(usa, 'United States').\ntype(usa, country).\nwithin(usa, namerica).\nname(idaho, 'Idaho').\ntype(idaho, state).\nwithin(idaho, usa).\nname(lucy, 'Lucy').\nborn_in(lucy, idaho).\n","attributes":{"language":"js"}},{"type":"paragraph","children":[{"type":"text","content":"To query the same data we did before, we can write"}]},{"type":"codeBlock","content":"within_recursive(Location, Name) :- name(Location, Name).     /* Rule 1 */\nwithin_recursive(Location, Name) :- within(Location, Via),    /* Rule 2 */\n                                    within_recursive(Via, Name).\nmigrated(Name, BornIn, LivingIn) :- name(Person, Name),       /* Rule 3 */\n                                    born_in(Person, BornLoc),\n                                    within_recursive(BornLoc, BornIn),\n                                    lives_in(Person, LivingLoc),\n                                    within_recursive(LivingLoc, LivingIn).\n?- migrated(Who, 'United States', 'Europe').\n/* Who = 'Lucy'. */\n","attributes":{"language":"js"}},{"type":"paragraph","children":[{"type":"text","content":"Rules can refer to other rules or itself, just like functions can call other functions or recursively call themselves. A rule applies if the system can find a match for "},{"type":"emphasis","children":[{"type":"text","content":"all"}]},{"type":"text","content":" predicates on the righthand side of the "},{"type":"inlineCode","content":":-"},{"type":"text","content":" operator. For example:"}]},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"inlineCode","content":"name(namerica, 'North America')"},{"type":"text","content":"  exists  in  the  database,  so  rule  1  applies.  It\ngenerates "},{"type":"inlineCode","content":"within_recursive(namerica, 'North America')"},{"type":"text","content":"."}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"inlineCode","content":"within(usa, namerica)"},{"type":"text","content":"  exists  in  the  database  and  the  previous  step  generated\n"},{"type":"inlineCode","content":"within_recursive(namerica, 'North America')"},{"type":"text","content":", so rule 2 applies. It generates\nwithin_recursive(usa, 'North America')."}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"inlineCode","content":"within(idaho,  usa)"},{"type":"text","content":"  exists  in  the  database  and  the  previous  step  generated "},{"type":"inlineCode","content":"within_recursive(usa,  'North  America')"},{"type":"text","content":", so rule 2 applies. It generates "},{"type":"inlineCode","content":"within_recursive(idaho, 'North America')"},{"type":"text","content":"."}]}]}],"attributes":{"ordered":true,"tight":true}},{"type":"paragraph","children":[{"type":"text","content":"By repeated application of rules 1 and 2, the "},{"type":"inlineCode","content":"within_recursive"},{"type":"text","content":" predicate can tell us all  the  locations  in  North  America  (or  any  other  location  name)  contained  in  our database."}]},{"type":"paragraph","children":[{"type":"text"},{"type":"image","children":[{"type":"text","content":"illustraion_explanation_for_datalog"}],"attributes":{"alt":"","src":"./1.png"}}]},{"type":"heading","children":[{"type":"text","content":"Notice"}],"attributes":{"id":"notice","level":1}},{"type":"paragraph","children":[{"type":"text","content":"The  Datalog  approach  requires  a  different  kind  of  thinking  to  the  other  query  languages discussed in this chapter, but it’s a very powerful approach, because rules can be  combined  and  reused  in  different  queries.  It’s  less  convenient  for  simple  one-off queries, but it can cope better if your data is complex."}]}],"attributes":{"date":"2025-09-20","tags":["book","designing data intensive applications"],"title":"The Foundation: Datalog"}}