{"type":"document","children":[{"type":"heading","children":[{"type":"text","content":"Insert Operation "},{"type":"emphasis","children":[{"type":"text","content":"p52"}]}],"attributes":{"id":"insert-operation-p52","level":1}},{"type":"codeBlock","content":"CREATE\n  (NAmerica:Location {name:'North America', type:'continent'}),\n  (USA:Location      {name:'United States', type:'country'  }),\n  (Idaho:Location    {name:'Idaho',         type:'state'    }),\n  (Lucy:Person       {name:'Lucy' }),\n  (Idaho) -[:WITHIN]-\u003e  (USA)  -[:WITHIN]-\u003e (NAmerica),\n  (Lucy)  -[:BORN_IN]-\u003e (Idaho)\n","attributes":{"language":"js"}},{"type":"paragraph","children":[{"type":"text","content":"In this example, we first declare some kinds of vertices, then describe their relationships with each other using edges."}]},{"type":"paragraph","children":[{"type":"text","content":"Base on this declaration, we can query:"}]},{"type":"blockQuote","children":[{"type":"paragraph","children":[{"type":"text","content":"find the names of all the people who emigrated from the United States to Europe"}]}]},{"type":"heading","children":[{"type":"text","content":"Query Operation "},{"type":"emphasis","children":[{"type":"text","content":"p53"}]}],"attributes":{"id":"query-operation-p53","level":1}},{"type":"paragraph","children":[{"type":"text","content":"To execute the query in Cypher statements, we can write"}]},{"type":"codeBlock","content":"MATCH\n    (person) -[:BORN_IN]-\u003e  () -[:WITHIN*0..]-\u003e(us:Location {name: 'United States'})\n    (person) -[:LIVES_IN]-\u003e () -[:WITHIN*0..]-\u003e(eu:Location {name: 'Europe'})\nRETURN person.name\n","attributes":{"language":"js"}},{"type":"paragraph","children":[{"type":"text","content":"The query means:"}]},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Find any vertex (call it "},{"type":"inlineCode","content":"person"},{"type":"text","content":") that meets both of the following conditions:"}]},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"inlineCode","content":"person"},{"type":"text","content":"  has  an  outgoing  "},{"type":"inlineCode","content":"BORN_IN"},{"type":"text","content":"  edge  to  some  vertex.  From  that vertex,  you  can follow  a  chain  of  outgoing  "},{"type":"inlineCode","content":"WITHIN"},{"type":"text","content":"  edges  until  eventually  you  reach  a  vertex  of type Location, whose name property is equal to "},{"type":"inlineCode","content":"\"United States\""},{"type":"text","content":"."}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"That  same  "},{"type":"inlineCode","content":"person"},{"type":"text","content":"  vertex  also  has  an  outgoing  "},{"type":"inlineCode","content":"LIVES_IN"},{"type":"text","content":"  edge.  Following  that edge, and then a chain of outgoing "},{"type":"inlineCode","content":"WITHIN"},{"type":"text","content":" edges, you eventually reach a vertex of type Location, whose name property is equal to "},{"type":"inlineCode","content":"\"Europe\""},{"type":"text","content":"."}]}]}],"attributes":{"ordered":true,"tight":true}}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"For each such "},{"type":"inlineCode","content":"person"},{"type":"text","content":" vertex, return the "},{"type":"inlineCode","content":"name"},{"type":"text","content":" property"}]}]}],"attributes":{"ordered":false,"tight":true}},{"type":"paragraph","children":[{"type":"text","content":"This query starts from "},{"type":"inlineCode","content":"person"},{"type":"text","content":", but it is not a must. We can also start from "},{"type":"inlineCode","content":"Location"},{"type":"text","content":"."}]},{"type":"heading","children":[{"type":"text","content":"What if in SQL? "},{"type":"emphasis","children":[{"type":"text","content":"p54"}]}],"attributes":{"id":"what-if-in-sql-p54","level":1}},{"type":"paragraph","children":[{"type":"text","content":"Such graphical relationship "},{"type":"strong","children":[{"type":"text","content":"can"}]},{"type":"text","content":" be written in SQL, and with the help of "},{"type":"emphasis","children":[{"type":"text","content":"recursive common table expressions"}]},{"type":"text","content":"(a feature), we do be able to query such information in SQL"}]},{"type":"codeBlock","content":"WITH RECURSIVE\n  -- in_usa is the set of vertex IDs of all locations within the United States\n  in_usa(vertex_id) AS (\n      SELECT vertex_id FROM vertices WHERE properties-\u003e\u003e'name' = 'United States' \n    UNION\n      SELECT edges.tail_vertex FROM edges \n        JOIN in_usa ON edges.head_vertex = in_usa.vertex_id\n        WHERE edges.label = 'within'\n  ),\n  -- in_europe is the set of vertex IDs of all locations within Europe\n  in_europe(vertex_id) AS (\n      SELECT vertex_id FROM vertices WHERE properties-\u003e\u003e'name' = 'Europe' \n    UNION\n      SELECT edges.tail_vertex FROM edges\n        JOIN in_europe ON edges.head_vertex = in_europe.vertex_id\n        WHERE edges.label = 'within'\n  ),\n  -- born_in_usa is the set of vertex IDs of all people born in the US\n  born_in_usa(vertex_id) AS ( \n    SELECT edges.tail_vertex FROM edges\n      JOIN in_usa ON edges.head_vertex = in_usa.vertex_id\n      WHERE edges.label = 'born_in'\n  ),\n  -- lives_in_europe is the set of vertex IDs of all people living in Europe\n  lives_in_europe(vertex_id) AS ( \n    SELECT edges.tail_vertex FROM edges\n      JOIN in_europe ON edges.head_vertex = in_europe.vertex_id\n      WHERE edges.label = 'lives_in'\n  )\nSELECT vertices.properties-\u003e\u003e'name'\nFROM vertices\n-- join to find those people who were both born in the US *and* live in Europe\nJOIN born_in_usa     ON vertices.vertex_id = born_in_usa.vertex_id \nJOIN lives_in_europe ON vertices.vertex_id = lives_in_europe.vertex_id;\n","attributes":{"language":"sql"}},{"type":"paragraph","children":[{"type":"text","content":"Well, as we can see above, no one will choose using SQL for such operation."}]}],"attributes":{"date":"2025-09-19","tags":["book","designing data intensive applications"],"title":"Cypher Query Language"}}